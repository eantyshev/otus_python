From 5eb915047de850a39b6df1297993b92ce9e52b27 Mon Sep 17 00:00:00 2001
From: Evgeny Antyshev <eantyshev@yandex-team.ru>
Date: Tue, 12 Jun 2018 16:33:27 +0300
Subject: [PATCH] LOAD_OTUS opcode

tested as:
~/work/cpython$ ./python
Python 3.8.0a0 (heads/master-dirty:1bcb8a6, Jun 12 2018, 13:51:12)
[GCC 5.4.0 20160609] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> def fib(n): return fib(n-1) + fib(n-2) if n > 1 else 1
...
>>> import dis
>>> dis.dis(fib)
  1           0 LOAD_OTUS                1 (1)
              2 COMPARE_OP               4 (>)
              4 POP_JUMP_IF_FALSE       26
              6 LOAD_GLOBAL              0 (fib)
              8 LOAD_OTUS                1 (1)
             10 BINARY_SUBTRACT
             12 CALL_FUNCTION            1
             14 LOAD_GLOBAL              0 (fib)
             16 LOAD_OTUS                2 (2)
             18 BINARY_SUBTRACT
             20 CALL_FUNCTION            1
             22 BINARY_ADD
             24 RETURN_VALUE
        >>   26 LOAD_CONST               1 (1)
             28 RETURN_VALUE
>>> print(fib(10))
89
---
 Include/opcode.h        |  1 +
 Lib/opcode.py           |  4 ++++
 Python/ceval.c          | 18 ++++++++++++++++++
 Python/opcode_targets.h |  2 +-
 Python/peephole.c       |  7 +++++++
 5 files changed, 31 insertions(+), 1 deletion(-)

diff --git a/Include/opcode.h b/Include/opcode.h
index e564bb9..1e975eb 100644
--- a/Include/opcode.h
+++ b/Include/opcode.h
@@ -128,6 +128,7 @@ extern "C" {
 #define CALL_METHOD             161
 #define CALL_FINALLY            162
 #define POP_FINALLY             163
+#define LOAD_OTUS               164
 
 /* EXCEPT_HANDLER is a special, implicit block type which is created when
    entering an except handler. It is not an opcode but we define it here
diff --git a/Lib/opcode.py b/Lib/opcode.py
index 3fb716b..e1e5055 100644
--- a/Lib/opcode.py
+++ b/Lib/opcode.py
@@ -213,4 +213,8 @@ def_op('CALL_METHOD', 161)
 jrel_op('CALL_FINALLY', 162)
 def_op('POP_FINALLY', 163)
 
+def_op('LOAD_OTUS', 164)
+hasconst.append(164)
+haslocal.append(164)
+
 del def_op, name_op, jrel_op, jabs_op
diff --git a/Python/ceval.c b/Python/ceval.c
index 422a29e..8568746 100644
--- a/Python/ceval.c
+++ b/Python/ceval.c
@@ -1071,6 +1071,24 @@ main_loop:
             FAST_DISPATCH();
         }
 
+        TARGET(LOAD_OTUS) {
+            PyObject *value = GETLOCAL(0);
+            if (value == NULL) {
+                format_exc_check_arg(PyExc_UnboundLocalError,
+                                     UNBOUNDLOCAL_ERROR_MSG,
+                                     PyTuple_GetItem(co->co_varnames, 0));
+                goto error;
+            }
+            Py_INCREF(value);
+            PUSH(value);
+
+            value = GETITEM(consts, oparg);
+            Py_INCREF(value);
+            PUSH(value);
+
+            FAST_DISPATCH();
+        }
+
         PREDICTED(STORE_FAST);
         TARGET(STORE_FAST) {
             PyObject *value = POP();
diff --git a/Python/opcode_targets.h b/Python/opcode_targets.h
index e82959b..8a50f7a 100644
--- a/Python/opcode_targets.h
+++ b/Python/opcode_targets.h
@@ -163,7 +163,7 @@ static void *opcode_targets[256] = {
     &&TARGET_CALL_METHOD,
     &&TARGET_CALL_FINALLY,
     &&TARGET_POP_FINALLY,
-    &&_unknown_opcode,
+    &&TARGET_LOAD_OTUS,
     &&_unknown_opcode,
     &&_unknown_opcode,
     &&_unknown_opcode,
diff --git a/Python/peephole.c b/Python/peephole.c
index 16fd500..93fcaa1 100644
--- a/Python/peephole.c
+++ b/Python/peephole.c
@@ -420,6 +420,13 @@ PyCode_Optimize(PyObject *code, PyObject* consts, PyObject *names,
                     nexti = find_op(codestr, h);
                 }
                 break;
+            case LOAD_FAST:
+                if (get_arg(codestr, i) == 0 && nextop == LOAD_CONST)
+                {
+                    j = get_arg(codestr, nexti);
+                    copy_op_arg(codestr, op_start, LOAD_OTUS, j, nexti + 1);
+                }
+                break;
         }
     }
 
-- 
2.7.4

